import React, { useState, useEffect } from 'react';
// [FINAL FIX ATTEMPT for Resolution Error] بازگرداندن پسوند .js برای سازگاری صریح با ماژول
import { supabase } from '../supabaseClient.js';
import { Swords, Clock, ExternalLink, Loader2, DatabaseZap, Clipboard } from 'lucide-react';
// import { Link } from 'react-router-dom'; 

const EXPLOITS_TO_SHOW = 10;

// --- Helper Functions (Borrowed/Adapted) ---

// تابع کمکی برای استخراج سال از ID (مثل CVE-1999-0002)
const extractYearFromId = (id) => {
    const match = id?.match(/(\d{4})/); // فقط چهار رقم اول را پیدا می‌کند
    return match ? match[1] : 'N/A';
};

// کامپوننت دکمه کپی (با استایل سایبرپانک)
const CopyButton = ({ textToCopy, isId = false }) => {
    const [copied, setCopied] = useState(false);

    const handleCopy = () => {
        try {
            const textarea = document.createElement('textarea');
            textarea.value = textToCopy;
            textarea.style.position = 'fixed'; 
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            setCopied(true);
            setTimeout(() => setCopied(false), 1500); 
        } catch (err) {
            console.error('Failed to copy text:', err);
            // نمایش پیام به جای alert
            const messageBox = document.createElement('div');
            messageBox.textContent = 'Copy failed. Try manually.';
            messageBox.className = 'fixed bottom-4 right-4 bg-cyber-red text-dark-bg p-3 rounded-lg shadow-lg z-50';
            document.body.appendChild(messageBox);
            setTimeout(() => document.body.removeChild(messageBox), 3000);
        }
    };

    const buttonClass = isId ? 
        'ml-1 px-1 py-0.5 text-xs rounded transition-all duration-150' : 
        'ml-2 px-2 py-1 text-xs font-mono rounded-full transition-all duration-150';
    
    const baseStyle = copied ? 
        'bg-cyber-green text-dark-bg shadow-lg shadow-cyber-green/50' : 
        'bg-gray-700/50 text-cyber-cyan hover:bg-cyber-cyan/30';

    return (
        <button 
            onClick={handleCopy} 
            title={isId ? `Copy ${textToCopy}` : "Copy description"}
            className={`flex items-center justify-center ${buttonClass} ${baseStyle}`}
        >
            {copied ? (isId ? 'OK' : 'COPIED!') : <Clipboard className="w-3 h-3 inline-block" />}
        </button>
    );
};

// --- Main Component ---
const ExploitDBTable = () => {
  const [latestExploits, setLatestExploits] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const getExploitLabel = (exploitability) => {
      const val = parseInt(exploitability, 10);
      switch(val) {
          case 1: 
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-red-900/50 text-cyber-red border border-cyber-red/50 uppercase">EXPLOITABLE (1)</span>;
          case 0:
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-cyan-900/50 text-cyber-cyan border border-cyber-cyan/50 uppercase">NOT EXPLOITABLE (0)</span>;
          default:
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-gray-700/50 text-gray-400 border border-gray-600/50 uppercase">UNKNOWN</span>;
      }
  };


  const fetchLatestExploits = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // کوئری کردن فقط ستون‌های موجود: ID, Description, Exploitability
      const { data, error } = await supabase
        .from('exploits') 
        .select('ID, Description, Exploitability') 
        // مرتب‌سازی بر اساس ID (جدیدترین CVEها)
        .order('ID', { ascending: false }) 
        .limit(EXPLOITS_TO_SHOW);

      if (error) {
        console.error('Supabase Query Error:', error);
        throw error;
      }

      console.log(`ExploitDBTable: Fetched ${data ? data.length : 0} exploits.`);
      setLatestExploits(data || []);
    } catch (error) {
      console.error('Error fetching Exploit-DB feed:', error.message);
      setError(`Database Query Error: ${error.message}. Please check RLS, the 'exploits' table structure, and data content.`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log('ExploitDBTable: Component mounted, starting initial fetch.');
    
    fetchLatestExploits();
    
    // تنظیم اشتراک Realtime
    const exploitSubscription = supabase
        .channel('exploits_changes')
        .on(
            'postgres_changes', 
            { event: 'INSERT', schema: 'public', table: 'exploits' }, 
            (payload) => {
                setLatestExploits((currentExploits) => {
                    const newExploits = [payload.new, ...currentExploits];
                    
                    // مرتب‌سازی بر اساس ID (فرض می‌کنیم جدیدترین IDها در بالا قرار دارند)
                    return newExploits
                        .sort((a, b) => (b.ID || '').localeCompare(a.ID || ''))
                        .slice(0, EXPLOITS_TO_SHOW);
                });
            }
        )
        .subscribe();

    return () => {
        supabase.removeChannel(exploitSubscription);
    };
  }, []);

  // --- Render logic ---
  return (
    <div className="flex flex-col h-full min-h-[400px]">
      
      {loading && (
        <div className="text-center py-10 text-cyber-cyan">
            <Loader2 className="animate-spin h-8 w-8 mx-auto mb-2" />
            <span>LOADING EXPLOIT_DB_FEED...</span>
        </div>
      )}

      {error && (
        <div className="text-center py-10 text-cyber-red">
          <DatabaseZap className="w-10 h-10 mx-auto mb-2" />
          <span>ERROR: {error}</span>
        </div>
      )}

      {!loading && !error && latestExploits.length === 0 && (
        <div className="text-center py-10 text-gray-500">
          <Swords className="w-10 h-10 mx-auto mb-2" />
          <span className="block mb-2 text-sm text-gray-400">NO LATEST EXPLOITS FOUND_ (TABLE EMPTY)</span>
          <p className="text-xs text-cyber-text/70 px-4">
            If this message persists, please ensure your Exploit-DB synchronization script is running correctly 
            and that Supabase Row Level Security (RLS) allows anonymous reads on the 'exploits' table.
          </p>
        </div>
      )}

      {!loading && !error && latestExploits.length > 0 && (
        <ul className="space-y-3 overflow-y-auto flex-grow">
          {latestExploits.map((exploit) => (
            <li
              key={exploit.ID}
              className="border-b border-gray-800/50 pb-3 last:border-b-0 last:pb-0 hover:bg-gray-800/50 p-3 rounded-lg transition duration-150 border-l-2 border-cyber-red/50"
            >
              <div className="flex justify-between items-start mb-1">
                {/* ID و سال استخراج شده */}
                <div className="flex items-center space-x-2">
                    <span 
                        className="text-cyber-red hover:text-red-400 font-semibold text-sm transition duration-150 flex items-center"
                        title={exploit.Description}
                    >
                      <ExternalLink className="w-4 h-4 mr-1 inline-block text-gray-600" />
                      {exploit.ID}
                    </span>
                    {/* نمایش سال استخراج شده از ID */}
                    <span className="text-xs text-gray-500 bg-gray-900/50 px-2 py-0.5 rounded-full">
                       YEAR: {extractYearFromId(exploit.ID)}
                    </span>
                </div>
                
                {/* Exploitability Label (0 or 1) */}
                {getExploitLabel(exploit.Exploitability)}
              </div>
              
              {/* توضیحات و دکمه کپی */}
              <p className="text-sm text-cyber-text/80 mt-1 line-clamp-2">
                <span className="font-bold text-gray-400">Description:</span> 
                {exploit.Description || 'No description available.'}
                <CopyButton textToCopy={exploit.Description || 'N/A'} />
              </p>
            </li>
          ))}
        </ul>
      )}

       {/* دکمه Refresh */}
       <div className="mt-4 pt-4 border-t border-gray-800/50">
          <button 
            onClick={fetchLatestExploits} 
            disabled={loading}
            className="text-cyber-cyan hover:text-cyan-500 font-medium text-sm flex items-center justify-end w-full"
          >
             <Swords className="w-4 h-4 mr-2" />
             {loading ? 'REFRESHING...' : 'REFRESH_FEED_'}
          </button>
       </div>
    </div>
  );
};

export default ExploitDBTable;
