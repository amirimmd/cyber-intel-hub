import React, { useState, useEffect, useCallback } from 'react';
// [FINAL RESOLUTION] مسیردهی صریح با پسوند .js برای سازگاری حداکثری.
import { supabase } from '../supabaseClient.js';
import { Swords, Loader2, DatabaseZap, Clipboard } from 'lucide-react';

const EXPLOITS_TO_SHOW = 10;
const HALF_EXPLOITS = EXPLOITS_TO_SHOW / 2; // 5 records each

// --- Helper Functions (Borrowed/Adapted) ---

// تابع کمکی برای استخراج سال از ID (مثل CVE-1999-0002)
const extractYearFromId = (id) => {
    // به دنبال الگوهایی شبیه CVE-YYYY-XXXX یا صرفاً اولین عدد ۴ رقمی می‌گردد
    const match = id?.match(/(\d{4})/); 
    return match ? match[1] : 'N/A';
};

// کامپوننت دکمه کپی (با استایل سایبرپانک)
// [FIX 1] اصلاح منطق دکمه کپی برای اطمینان از عملکرد
const CopyButton = ({ textToCopy }) => {
    const [copied, setCopied] = useState(false);

    const handleCopy = (e) => {
        // جلوگیری از کلیک روی آیتم والد
        e.stopPropagation(); 
        try {
            const textarea = document.createElement('textarea');
            textarea.value = textToCopy;
            textarea.style.position = 'fixed'; 
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            
            // استفاده از execCommand برای سازگاری
            document.execCommand('copy'); 
            
            document.body.removeChild(textarea);
            setCopied(true);
            setTimeout(() => setCopied(false), 1500); 
        } catch (err) {
            console.error('Failed to copy text:', err);
            // نمایش پیام به جای alert
            const messageBox = document.createElement('div');
            messageBox.textContent = 'Copy failed. Try manually.';
            messageBox.className = 'fixed bottom-4 right-4 bg-cyber-red text-dark-bg p-3 rounded-lg shadow-lg z-50';
            document.body.appendChild(messageBox);
            setTimeout(() => document.body.removeChild(messageBox), 3000);
        }
    };

    const buttonClass = 'ml-2 px-2 py-1 text-xs font-mono rounded-full transition-all duration-150';
    
    // [FIX 2] اطمینان از نمایش صحیح متن "COPIED!"
    const baseStyle = copied ? 
        'bg-cyber-green text-dark-bg shadow-lg shadow-cyber-green/50' : 
        'bg-gray-700/50 text-cyber-cyan hover:bg-cyber-cyan/30';

    return (
        <button 
            onClick={handleCopy} 
            title="Copy description"
            className={`flex items-center justify-center flex-shrink-0 ${buttonClass} ${baseStyle}`}
        >
            {copied ? 'COPIED!' : <Clipboard className="w-3 h-3 inline-block" />}
        </button>
    );
};

// --- Main Component ---
const ExploitDBTable = () => {
  const [latestExploits, setLatestExploits] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const getExploitLabel = (exploitability) => {
      // [FIX 3] استفاده از parseInt مطمئن برای مقایسه
      const val = parseInt(String(exploitability), 10);
      
      switch(val) {
          case 1: 
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-red-900/50 text-cyber-red border border-cyber-red/50 uppercase">EXPLOITABLE (1)</span>;
          case 0:
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-cyan-900/50 text-cyber-cyan border border-cyan-500/50 uppercase">NOT EXPLOITABLE (0)</span>;
          default:
              // مدیریت مقادیر NULL یا نامعتبر
              return <span className="px-2 py-0.5 text-xs font-medium rounded bg-gray-700/50 text-gray-400 border border-gray-600/50 uppercase">UNKNOWN</span>;
      }
  };


  // [FIX 4] تغییر کامل منطق واکشی برای حل مشکل عدم نمایش لیبل ۱
  const fetchLatestExploits = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      // کوئری کردن ستون‌های موجود: ID, Description, Exploitability
      
      // کوئری ۱: دریافت ۵ مورد آخر با لیبل ۱
      const query1 = supabase
        .from('exploits') 
        .select('ID, Description, Exploitability')
        .eq('Exploitability', 1) // فیلتر برای لیبل ۱
        .order('ID', { ascending: false }) 
        .limit(HALF_EXPLOITS); // 5 records

      // کوئری ۲: دریافت ۵ مورد آخر با لیبل ۰ (یا NULL)
      const query0 = supabase
        .from('exploits')
        .select('ID, Description, Exploitability')
        .neq('Exploitability', 1) // فیلتر برای لیبل ۰ یا NULL
        .order('ID', { ascending: false })
        .limit(HALF_EXPLOITS); // 5 records

      // اجرای همزمان هر دو کوئری
      const [response1, response0] = await Promise.all([query1, query0]);

      if (response1.error) throw response1.error;
      if (response0.error) throw response0.error;

      const data1 = response1.data || [];
      const data0 = response0.data || [];

      console.log(`ExploitDBTable: Fetched ${data1.length} (Label 1) and ${data0.length} (Label 0/Other).`);

      // ترکیب نتایج
      let combinedData = [...data1, ...data0];
      
      // مرتب‌سازی نهایی بر اساس ID (جدیدترین به قدیمی‌ترین)
      combinedData.sort((a, b) => (a.ID < b.ID ? 1 : a.ID > b.ID ? -1 : 0));
      
      // اطمینان از اینکه بیشتر از ۱۰ مورد نمایش داده نمی‌شود (اگرچه کوئری‌ها محدود شده‌اند)
      const finalSet = combinedData.slice(0, EXPLOITS_TO_SHOW);

      console.log(`ExploitDBTable: Final display set size: ${finalSet.length}`);
      setLatestExploits(finalSet);

    } catch (error) {
      console.error('Error fetching Exploit-DB feed:', error.message);
      setError(`Database Query Error: ${error.message}. Please check RLS, the 'exploits' table structure, and data content.`);
    } finally {
      setLoading(false);
    }
  }, []); // useCallback

  useEffect(() => {
    console.log('ExploitDBTable: Component mounted, starting initial fetch.');
    
    fetchLatestExploits();
    
    const exploitSubscription = supabase
        .channel('exploits_changes')
        .on(
            'postgres_changes', 
            { event: '*', schema: 'public', table: 'exploits' }, 
            (payload) => {
                 console.log('ExploitDBTable: Realtime change detected, refetching...');
                 fetchLatestExploits(); 
            }
        )
        .subscribe();

    return () => {
        console.log('ExploitDBTable: Component unmounting, removing subscription.');
        supabase.removeChannel(exploitSubscription);
    };
  }, [fetchLatestExploits]); // اطمینان از استفاده از fetchLatestExploits بروز شده

  // --- Render logic ---
  return (
    <div className="flex flex-col h-full min-h-[400px]">
      
      {loading && (
        <div className="text-center py-10 text-cyber-cyan">
            <Loader2 className="animate-spin h-8 w-8 mx-auto mb-2" />
            <span>LOADING EXPLOIT_DB_FEED...</span>
        </div>
      )}

      {error && (
        <div className="text-center py-10 text-cyber-red">
          <DatabaseZap className="w-10 h-10 mx-auto mb-2" />
          <span>ERROR: {error}</span>
        </div>
      )}

      {!loading && !error && latestExploits.length === 0 && (
        <div className="text-center py-10 text-gray-500">
          <Swords className="w-10 h-10 mx-auto mb-2" />
          <span className="block mb-2 text-sm text-gray-400">NO LATEST EXPLOITS FOUND_ (TABLE EMPTY)</span>
          <p className="text-xs text-cyber-text/70 px-4">
            If this message persists, please ensure your Exploit-DB synchronization script is running correctly 
            and that Supabase Row Level Security (RLS) allows anonymous reads on the 'exploits' table.
          </p>
        </div>
      )}

      {!loading && !error && latestExploits.length > 0 && (
        <ul className="space-y-3 overflow-y-auto flex-grow">
          {latestExploits.map((exploit) => (
            <li
              key={exploit.ID}
              className="border-b border-gray-800/50 pb-3 last:border-b-0 last:pb-0 hover:bg-gray-800/50 p-3 rounded-lg transition duration-150 border-l-2 border-cyber-red/50"
            >
              <div className="flex justify-between items-start mb-1">
                {/* ID و سال استخراج شده */}
                <div className="flex items-center space-x-2">
                    <span 
                        className="text-cyber-red hover:text-red-400 font-semibold text-sm transition duration-150 flex items-center"
                        title={exploit.ID} // عنوان خود ID است
                    >
                      {exploit.ID}
                    </span>
                    {/* نمایش سال استخراج شده از ID */}
                    <span className="text-xs text-gray-500 bg-gray-900/50 px-2 py-0.5 rounded-full">
                       YEAR: {extractYearFromId(exploit.ID)}
                    </span>
                </div>
                
                {/* Exploitability Label (0 or 1) */}
                {getExploitLabel(exploit.Exploitability)}
              </div>
              
              {/* توضیحات و دکمه کپی */}
              <div className="flex justify-between items-start mt-2">
                  <p className="text-sm text-cyber-text/80 line-clamp-2 w-full pr-4">
                    {/* [FIX 5] حذف برچسب "Description:" برای تمیزی */}
                    {exploit.Description || 'No description available.'}
                  </p>
                   {/* [REQUEST IMPLEMENTATION] دکمه کپی در انتهای توضیحات */}
                  <CopyButton textToCopy={exploit.Description || 'N/A'} />
              </div>
            </li>
          ))}
        </ul>
      )}

       {/* دکمه Refresh */}
       <div className="mt-4 pt-4 border-t border-gray-800/50">
          <button 
            onClick={fetchLatestExploits} 
            disabled={loading}
            className="text-cyber-cyan hover:text-cyan-500 font-medium text-sm flex items-center justify-end w-full disabled:opacity-50"
          >
             <Swords className="w-4 h-4 mr-2" />
             {loading ? 'REFRESHING...' : 'REFRESH_FEED_'}
          </button>
       </div>
    </div>
  );
};

export default ExploitDBTable;

